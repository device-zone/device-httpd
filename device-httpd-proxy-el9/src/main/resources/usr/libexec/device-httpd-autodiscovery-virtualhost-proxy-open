#!/bin/bash

if [ $# -eq 3 ]; then

  instance="${1}"
  virtualhost="${2}"

  #
  # Handle proxy open locations

  # find /etc/device/services/www/open/proxy/ -mindepth 1 -maxdepth 1 -type l
  while read line; do

    if test ! -f "$line/virtualhost.d/listen.d/instance.d/name.txt" -o "${instance}" != "$(head -n 1 $line/virtualhost.d/listen.d/instance.d/name.txt)"; then
      continue;
    fi
    if test ! -f "$line/virtualhost.d/name.txt" -o "${virtualhost}" != "$(head -n 1 $line/virtualhost.d/name.txt)"; then
      continue;
    fi
    if test ! -f "$line/name.txt"; then
      continue;
    fi
    location="$(head -n 1 ${line}/name.txt)"

    # read server-name if present
    if test -f "$line/virtualhost.d/server-name.txt"; then
      servername="$(head -n 1 $line/virtualhost.d/server-name.txt)"
    else
      servername="$(hostname -f)"
    fi

    # read in the path if present
    path=""
    if test -f "${line}/path.txt"; then
      path="$(head -n 1 ${line}/path.txt)"
    fi
    # empty path becomes a /
    if test -z "${path}";then
      path="/"
    fi

    # remove for safety
    rm -f "/etc/httpd/conf.device.d/instance/${instance}/secure-${virtualhost}.d/location-$(echo ${path} | tr [:cntrl:][:punct:] _).conf"

    # read auth if present
    # Note: "open" MAY be open, MAY be locked, and MAY be misconfigured
    authname=""
    if test -f "$line/auth.d/name.txt"; then
      authname="$(head -n 1 $line/auth.d/name.txt)"
    fi

    # read url if present
    url=""
    if test -f "$line/remote.d/url.txt"; then
      url="$(head -n 1 $line/remote.d/url.txt)"
    fi
    if test -z "${url}"; then
      continue;
    fi

    # access url if present
    access_url=""
    access_text=""
    if test -f "$line/access-url.txt"; then
      access_url="$(head -n 1 ${line}/access-url.txt)"
      if test -n "${access_url}"; then
        access_text=" To request access, <a href='$(echo ${access_url} | recode ..html)'>click here</a>."
      fi
    fi

    # max/aquire if present
    params=" upgrade=on mapping=encoded"
    if test -f "$line/max.txt"; then
      params+=" max=$(head -n 1 ${line}/max.txt)"
    fi
    if test -f "$line/acquire.txt"; then
      params+=" acquire=$(head -n 1 ${line}/acquire.txt)"
    fi

    cat > "location.conf" <<- EOF
# Generated by $0 on `date`
# DO NOT MODIFY THIS FILE - it will be overwritten on server restart.
#
# To override this file, add configuration to the following location:
# /etc/httpd/conf.device.d/secure/${servername}/*.conf
#

<IfModule !proxy_module>
  LoadModule proxy_module modules/mod_proxy.so
</IfModule>
<IfModule !proxy_http_module>
  LoadModule proxy_http_module modules/mod_proxy_http.so
</IfModule>
<IfModule !proxy_wstunnel_module>
  LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
</IfModule>

<IfModule !authz_core_module>
  LoadModule authz_core_module modules/mod_authz_core.so
</IfModule>

# Open proxy configured from ${line}/path.txt

<Location ${path}>

  ProxyPass ${url}${params}
  ProxyPassReverse ${url}

EOF

    if test -n "${authname}"; then
      cat >> "location.conf" <<- EOF
  AuthzSendForbiddenOnFailure on

  <If "%{SSL_CLIENT_VERIFY} == 'SUCCESS' || %{SSL_CLIENT_VERIFY} == 'GENEROUS'">

    SSLUserName SSL_CLIENT_CERT_RFC4523_CEA

    require device-tls-${authname}

    ErrorDocument 403 "<html><head><title>403 Forbidden</title></head><body><h1>Forbidden</h1><p>Your gadget '%{SSL_CLIENT_S_DN_CN}' currently does not have permission to access this URL.${access_text}</p></body></html>"

  </If>
  <Else>
    require all denied

    ErrorDocument 403 "<html><head><title>403 Forbidden</title></head><body><h1>Forbidden</h1><p>A digital certificate is required to access this URL, but none was provided. Did you click cancel?${access_text}</p></body></html>"

  </Else>
EOF
    else
      cat >> "location.conf" <<- EOF
      # no authname specified, so access is granted
      require all granted

EOF
    fi

    cat >> "location.conf" <<- EOF
</Location>
EOF

    install "location.conf" "/etc/httpd/conf.device.d/instance/${instance}/secure-${virtualhost}.d/location-$(echo ${path} | tr [:cntrl:][:punct:] _).conf"

  done < <(find /etc/device/services/www/open/proxy/ -mindepth 1 -maxdepth 1 -type l)

fi


